{"version":3,"sources":["create.svg","check.svg","components/Note.js","components/List.js","components/Form.js","NoteService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Content","props","active","Spacer","EditButton","button","Note","note","selected","editNote","title","onClick","src","create","height","alt","text","ListContainer","ul","ListItem","li","List","notes","onSelect","map","index","key","StyledForm","form","SubmitButton","Form","onSubmit","onChange","name","type","value","placeholder","check","getNotes","localStorage","getItem","JSON","parse","saveNote","edit","curr","id","setItem","stringify","Date","getTime","CreateButton","App","useState","setNotes","selectedIndex","setSelectedIndex","currentNote","setCurrentNote","loadNotes","service","useEffect","onNoteSelect","openNoteForm","history","push","onNoteChange","event","target","onNoteSubmit","preventDefault","openEditNote","className","exact","path","render","Fragment","Boolean","window","location","hostname","match","ReactDOM","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c424309.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/create.45b30f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.235701a7.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport create from \"../create.svg\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.span`\n  display: flex;\n  background-color: #474646;\n  color: white;\n  cursor: pointer;\n  padding: 18px 0 18px 0;\n  width: 100%;\n  border: 1px solid black;\n  text-align: left;\n  outline: none;\n  font-size: 24px;\n`;\n\nconst Content = styled.div`\n  padding: 0 18px;\n  max-height: ${props => (props.active ? \"100%\" : 0)};\n  overflow: hidden;\n  text-align: left;\n  background-color: #474646;\n  color: white;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\nconst EditButton = styled.button`\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  margin-right: 10px;\n  background-color: whitesmoke;\n  color: #fff;\n  border-radius: 50px;\n  border: 2px black solid;\n  text-align: center;\n`;\n\nexport default function Note({ note, selected, editNote }) {\n  return (\n    <Container>\n      <Title>\n        {note.title}\n        <Spacer />\n        <EditButton onClick={() => editNote(note)}>\n          <img src={create} height=\"20\" alt=\"pen\" />\n        </EditButton>\n      </Title>\n      <Content active={selected}>\n        <p>{note.text}</p>\n      </Content>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Note from \"../components/Note\";\n\nconst ListContainer = styled.ul`\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled.li``;\n\nexport default function List({ notes, onSelect, selected, editNote }) {\n  return (\n    <ListContainer>\n      {notes.map((note, index) => (\n        <ListItem onClick={() => onSelect(index)}>\n          <Note\n            key={index}\n            note={note}\n            selected={selected === index}\n            editNote={editNote}\n          />\n        </ListItem>\n      ))}\n    </ListContainer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport check from \"../check.svg\";\n\nconst Container = styled.div`\n  width: 50vw;\n  margin: auto;\n`;\n\nconst StyledForm = styled.form`\n  display: grid;\n  grid-gap: 10px;\n`;\n\nconst SubmitButton = styled.button`\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  bottom: 40px;\n  right: 40px;\n  cursor: pointer;\n  background-color: lightgreen;\n  color: #fff;\n  border-radius: 50px;\n  border: 2px black solid;\n  text-align: center;\n  box-shadow: 2px 2px 3px #999;\n`;\n\nexport default function Form({ note, onSubmit, onChange }) {\n  return (\n    <Container>\n      <StyledForm onSubmit={onSubmit}>\n        <input\n          name=\"title\"\n          type=\"text\"\n          value={note.title}\n          placeholder=\"Title\"\n          onChange={onChange}\n        />\n        <textarea\n          name=\"text\"\n          value={note.text}\n          placeholder=\"Note\"\n          onChange={onChange}\n        />\n        <SubmitButton type=\"submit\">\n          <img src={check} height=\"60\" alt=\"pen\" />\n        </SubmitButton>\n      </StyledForm>\n    </Container>\n  );\n}\n","const getNotes = () => {\n  const notes = localStorage.getItem(\"notes\");\n  if (!notes) {\n    return [];\n  }\n  return JSON.parse(notes);\n};\n\nconst saveNote = note => {\n  // TODO : Improve this function\n  const notes = getNotes();\n  if (note.edit) {\n    notes.map(curr => {\n      if (curr.id === note.id) {\n        curr.text = note.text;\n        curr.title = note.title;\n        return curr;\n      }\n      return curr;\n    });\n    localStorage.setItem(\"notes\", JSON.stringify([...notes]));\n  } else {\n    const id = \"note-\" + new Date().getTime();\n    note.id = id;\n    localStorage.setItem(\"notes\", JSON.stringify([...notes, note]));\n  }\n};\n\nexport default {\n  getNotes,\n  saveNote\n};\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport List from \"./components/List\";\nimport Form from \"./components/Form\";\nimport service from \"./NoteService\";\nimport styled from \"styled-components\";\nimport create from \"./create.svg\";\n\nconst CreateButton = styled.button`\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  bottom: 40px;\n  right: 40px;\n  cursor: pointer;\n  background-color: whitesmoke;\n  color: #fff;\n  border-radius: 50px;\n  border: 2px black solid;\n  text-align: center;\n  box-shadow: 2px 2px 3px #999;\n`;\n\nfunction App(props) {\n  const [notes, setNotes] = useState([]);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [currentNote, setCurrentNote] = useState({\n    title: \"\",\n    text: \"\"\n  });\n\n  const loadNotes = () => {\n    const notes = service.getNotes();\n    setNotes(notes);\n  };\n\n  useEffect(() => {\n    loadNotes();\n  }, []);\n\n  const onNoteSelect = index => {\n    if (selectedIndex === index) {\n      setSelectedIndex(null);\n    } else {\n      setSelectedIndex(index);\n    }\n  };\n\n  const openNoteForm = () => {\n    props.history.push(\"/form\");\n  };\n\n  const onNoteChange = event => {\n    setCurrentNote({ ...currentNote, [event.target.name]: event.target.value });\n  };\n\n  const onNoteSubmit = event => {\n    event.preventDefault();\n    service.saveNote(currentNote);\n    setCurrentNote({ title: \"\", text: \"\" });\n    loadNotes();\n    props.history.push(\"/\");\n  };\n\n  const openEditNote = note => {\n    const editNote = { ...note, edit: true };\n    setCurrentNote(editNote);\n    props.history.push(\"/form\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Route\n        exact\n        path=\"/\"\n        render={props => (\n          <React.Fragment>\n            <List\n              notes={notes}\n              onSelect={onNoteSelect}\n              selected={selectedIndex}\n              editNote={openEditNote}\n            />\n            <CreateButton onClick={openNoteForm}>\n              <img src={create} height=\"50\" alt=\"pen\" />\n            </CreateButton>\n          </React.Fragment>\n        )}\n      />\n\n      <Route\n        path=\"/form\"\n        render={props => (\n          <Form\n            {...props}\n            onChange={onNoteChange}\n            note={currentNote}\n            onSubmit={onNoteSubmit}\n          />\n        )}\n      />\n    </div>\n  );\n}\n\nexport default () => (\n  <Router>\n    <Route component={App} />\n  </Router>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}